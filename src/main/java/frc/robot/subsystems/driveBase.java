// RobotBuilder Version: 6.1
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;

import frc.robot.commands.*;
import swervelib.SwerveController;
import swervelib.SwerveDrive;
import swervelib.parser.SwerveParser;

import java.io.File;

import edu.wpi.first.math.geometry.Pose2d;
import edu.wpi.first.math.kinematics.ChassisSpeeds;
import edu.wpi.first.math.util.Units;
import edu.wpi.first.wpilibj.Filesystem;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.SubsystemBase;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class driveBase extends SubsystemBase {

    public SwerveDrive      swerveDrive;
    public SwerveController swerveController;
    final  double           maximumSpeed = Units.feetToMeters(15.1); //FIXME
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    /**
    *
    */
    public driveBase() {
        try {
            swerveDrive = new SwerveParser(new File(Filesystem.getDeployDirectory(), "swerve"))
                    .createSwerveDrive(maximumSpeed);
            swerveController = swerveDrive.swerveController;
            swerveController.thetaController.setTolerance(Math.PI / 90.0, 0.1);
            swerveController.thetaController.setPID(0.85, 0.0, 0.02);
        } catch (Exception e) {
            e.printStackTrace();
        }

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run
        Pose2d current_pose = swerveDrive.swerveDrivePoseEstimator.getEstimatedPosition( );
        SmartDashboard.putNumber("RobotX", current_pose.getX( ) );
        SmartDashboard.putNumber("RobotY", current_pose.getY( ) );
        SmartDashboard.putNumber("RobotZ", current_pose.getRotation( ).getDegrees( ) );
        //SmartDashboard.putNumber("ctrlx", x_y_ctrl.getX());
        //SmartDashboard.putNumber("ctrly", x_y_ctrl.getY());
    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void drive(double x, double y, double rot) 
    {
        swerveDrive.driveFieldOriented( new ChassisSpeeds( x, y, rot ) );
    }

    public void stop() 
    {
        
    }

}
