// RobotBuilder Version: 6.1
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;

import swervelib.SwerveController;
import swervelib.SwerveDrive;
import swervelib.SwerveDriveTest;
import swervelib.parser.SwerveParser;
import swervelib.telemetry.SwerveDriveTelemetry;
import swervelib.telemetry.SwerveDriveTelemetry.TelemetryVerbosity;

import java.io.File;

import edu.wpi.first.epilogue.Logged;
import edu.wpi.first.math.MathUtil;
import edu.wpi.first.math.controller.PIDController;
import edu.wpi.first.math.geometry.Pose2d;
import edu.wpi.first.math.geometry.Rotation2d;
import edu.wpi.first.math.kinematics.ChassisSpeeds;
import edu.wpi.first.math.trajectory.TrapezoidProfile;
import edu.wpi.first.networktables.NetworkTable;
import edu.wpi.first.networktables.NetworkTableEntry;
import edu.wpi.first.networktables.NetworkTableInstance;
import edu.wpi.first.wpilibj.Filesystem;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.Command;
import edu.wpi.first.wpilibj2.command.SubsystemBase;
import edu.wpi.first.wpilibj2.command.sysid.SysIdRoutine.Config;
import frc.robot.LimelightHelpers;
import frc.robot.LimelightHelpers.LimelightResults;
import frc.robot.Pose2dFilter;
import frc.robot.commands.DriveAngleSetCommand;
import frc.robot.config.ConfigurationLoader;
import frc.robot.config.DriveBaseSubsystemConfig;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 * The drive base subsystem for the robot.
 */
@Logged
public class DriveBaseSubsystem extends SubsystemBase {
    private boolean haveTarget = false;
    private Pose2d targetPose = new Pose2d();
    private ChassisSpeeds lastChassisSpeeds = new ChassisSpeeds();

    private static double kDt = 0.02;
    private final TrapezoidProfile xy_profile = new TrapezoidProfile(new TrapezoidProfile.Constraints(5.0, 0.75));
    private TrapezoidProfile.State xy_goal = new TrapezoidProfile.State();
    private TrapezoidProfile.State xy_setpoint = new TrapezoidProfile.State();
    private PIDController xy_PID = new PIDController(6.0, 0.0, 0.0);

    private final TrapezoidProfile r_profile = new TrapezoidProfile(new TrapezoidProfile.Constraints(5.0, 0.75));
    private TrapezoidProfile.State r_goal = new TrapezoidProfile.State();
    private TrapezoidProfile.State r_setpoint = new TrapezoidProfile.State();
    private PIDController r_PID = new PIDController(6.0, 0.0, 0.0);

    public SwerveDrive swerveDrive;
    private SwerveController swerveController;
    private DriveBaseSubsystemConfig driveBaseSubsystemConfig;

    NetworkTable table        = NetworkTableInstance.getDefault().getTable("limelight");
    NetworkTableEntry tx      = table.getEntry("tx");
    NetworkTableEntry ty      = table.getEntry("ty");
    NetworkTableEntry ta      = table.getEntry("ta");
    NetworkTableEntry tid     = table.getEntry("tid");
    NetworkTableEntry tl      = table.getEntry("tl");
    NetworkTableEntry cl      = table.getEntry("cl");
    NetworkTableEntry botpose = table.getEntry("botpose");
    Pose2dFilter filter       = new Pose2dFilter(true);
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    /**
    *
    */
    public DriveBaseSubsystem() {
        try {
            // Load Configuration
            // TODO: this should probably be injected instead of located
            driveBaseSubsystemConfig = ConfigurationLoader.load("drivebasesubsystem.json",
                    DriveBaseSubsystemConfig.class);
            swerveDrive = new SwerveParser(new File(Filesystem.getDeployDirectory(), "swerve"))
                    .createSwerveDrive(driveBaseSubsystemConfig.maximumSpeedInMeters());
            swerveController = swerveDrive.swerveController;
            swerveController.thetaController.setTolerance(Math.PI / driveBaseSubsystemConfig.thetaControllerTolerance,
                    0.1);
            swerveController.thetaController.setPID(driveBaseSubsystemConfig.thetaControllerPidKp,
                    driveBaseSubsystemConfig.thetaControllerPidKi, driveBaseSubsystemConfig.thetaControllerPidKd);
        } catch (Exception e) {
            e.printStackTrace();
        }
        SwerveDriveTelemetry.verbosity = TelemetryVerbosity.HIGH;
        xy_PID.setTolerance(0.05, 0.05);
        xy_PID.setIntegratorRange(-0.04, 0.04);
        xy_PID.setSetpoint(0);

        r_PID.setTolerance(0.05, 0.05);
        r_PID.setIntegratorRange(-0.04, 0.04);
        r_PID.setSetpoint(0);

        swerveDrive.setMotorIdleMode(true);
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run
        Pose2d current_pose = swerveDrive.swerveDrivePoseEstimator.getEstimatedPosition();
        limelightPeriodic( current_pose.getRotation().getDegrees() );
        SmartDashboard.putNumber("RobotX", current_pose.getX());
        SmartDashboard.putNumber("RobotY", current_pose.getY());
        SmartDashboard.putNumber("RobotRot", current_pose.getRotation().getDegrees());
    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    private void limelightPeriodic( double degrees ) {
        // read values periodically
        double x = tx.getDouble(0.0);
        double y = ty.getDouble(0.0);
        double tempid = tid.getDouble(0.0);
        double area = ta.getDouble(0.0);
        double latency = tl.getDouble(0.0);
        double capture = cl.getDouble(0.0);

        // post to smart dashboard periodically
        SmartDashboard.putNumber("LimelightX", x);
        SmartDashboard.putNumber("LimelightY", y);
        SmartDashboard.putNumber("LimelightTID", tempid);
        SmartDashboard.putNumber("LimelightArea", area);

        LimelightHelpers.SetRobotOrientation("limelight", degrees, 0.0, 0.0, 0.0, 0.0, 0);
        LimelightHelpers.PoseEstimate mt2 = LimelightHelpers.getBotPoseEstimate_wpiBlue_MegaTag2("limelight");
        if (mt2.tagCount != 0) {
            // Use these lines to filter pose data from limelight
            if (filter.addData(mt2.pose, mt2.timestampSeconds)) {
                addVisionMeasurement(filter.avgPose, filter.avgTime);
            }
        }
    }

    /**
     * Drive the robot using field-oriented control
     *
     * @param x   the x meters per second to move
     *
     * @param y   the y meters per second to move
     *
     * @param rot the radians per second to move
     *
     * @return void
     */
    public void drive(double x, double y, double rot) {
        lastChassisSpeeds = new ChassisSpeeds(x, y, rot);
        swerveDrive.driveFieldOriented(lastChassisSpeeds);
    }

    /**
     * Drive towards target pose
     */
    public void driveToTarget() {
        Pose2d current_pose = getPose();

        Double x_err = targetPose.getX() - current_pose.getX();
        Double x_speed = 0.0;
        Double y_err = targetPose.getY() - current_pose.getY();
        Double y_speed = 0.0;
        Double xy_err = Math.hypot(x_err, y_err);
        // Double xy_pid_err = 0.0;
        boolean at_xy = xy_err < 0.01;
        Double velocity = 0.0;

        Double r_err = MathUtil
                .angleModulus(targetPose.getRotation().getDegrees() - current_pose.getRotation().getDegrees());
        Double r_speed = 0.0;
        boolean at_r = Math.abs(r_err) < 0.1;
        // Double r_pid_err = 0.0;

        if (!at_xy || !at_r) {
            if (!at_xy) {
                // xy_pid_err = xy_err - xy_setpoint.position;
                xy_setpoint = xy_profile.calculate(kDt, xy_setpoint, xy_goal);
                velocity = xy_setpoint.velocity; // + xy_pid.calculate( xy_pid_err ); test the rest first
                x_speed = velocity * x_err / xy_err;
                y_speed = velocity * y_err / xy_err;
            }
            if (!at_r) {
                // r_pid_err = r_err - r_setpoint.position;
                r_setpoint = r_profile.calculate(kDt, r_setpoint, r_goal);
                velocity = r_setpoint.velocity; // + r_pid.calculate( r_pid_err ); test the rest first
                r_speed = r_setpoint.velocity;
                // if ( r_err < 0.0 ) Don't think we need this
                // {
                // r_speed = -r_speed;
                // }
            }
        } else {
            haveTarget = false;
        }
        drive(x_speed, y_speed, r_speed);
    }

    /**
     * Stop the robot by setting chassis speeds to 0
     */
    public void stop() {
        drive(0, 0, 0);
    }

    /**
     * Add vision measurement collected to odometry
     */
    void addVisionMeasurement(Pose2d new_pose, double timestamp) {
        swerveDrive.addVisionMeasurement(new_pose, timestamp);
    }

    /**
     * Returns the latest pose of the robot from odometery
     */
    public Pose2d getPose() {
        return swerveDrive.getPose();
    }

    /**
     * Sets the current pose of the robot from odometery (usually at the start of
     * auton)
     */
    public void setPose(Pose2d new_pose) {
        // swerveDrive.setswerveDrivePseEstimator.setPose( new_pose );
    }

    /**
     * Sets the taget pose for the robot (usually at the start of a command)
     */
    public void setTarget(Pose2d new_target) {
        Pose2d current_pose = getPose();

        targetPose = new_target;
        xy_setpoint = new TrapezoidProfile.State(Math.hypot(targetPose.getX(), targetPose.getY()), 0.0);
        r_setpoint = new TrapezoidProfile.State(
                MathUtil.angleModulus(targetPose.getRotation().getDegrees() - current_pose.getRotation().getDegrees()),
                0.0);
        xy_PID.reset();
        r_PID.reset();
        haveTarget = true;
    }

    /**
     * Sets the taget pose for the robot (usually at the start of a command)
     */
    public boolean atTarget() {
        return !haveTarget;
    }
    /**
     * Return a Command to go to a Pose2d
     */
    // public Command moveTo( Pose2d new_pose )
    // {
    // return new FunctionalCommand(
    // ()->this.setPose( new_pose ),
    // ()->this.driveToTarget( ),
    // ()->this.stop( ),
    // ()->this.atTarget( ) );
    // }

    /**
     * Return a Command to test the angle motors
     */
    public Command getAngleMotorTestCommand() {
        return SwerveDriveTest.generateSysIdCommand(
                SwerveDriveTest.setAngleSysIdRoutine(new Config(), this, swerveDrive), 3.0, 4.0, 4.0);
    }

    /**
     * Return a Command to test the drive motors
     */
    public Command getDriveMotorTestCommand() {
        return SwerveDriveTest.generateSysIdCommand(
                SwerveDriveTest.setDriveSysIdRoutine(new Config(), this, swerveDrive, 6.0, false), 3.0, 4.0, 4.0);
    }

    public Command getRobotAngleTestCommand() {
        return new DriveAngleSetCommand(new Rotation2d(0), this);
    }

    public SwerveDrive getSwerve() {
        return swerveDrive;
    }
}
